<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8"/>
  <title>Dessin SVG dynamique</title>
  <!-- voir https://greensock.com/docs/v3/Installation#installer -->
  <script src="https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/gsap.min.js"></script>
</head>
<body>
  <!-- dessin SVG créé et modifié par les scripts JS -->
  <svg xmlns="http://www.w3.org/2000/svg"
       viewBox="0 0 200 200"
       width="100%"
       id="dessin">
  </svg>

  <!-- utilisation du mixin SVGelement -->
  <script src="svgelement.js"></script>

  <script>

/** Représente et dessine une led dans un SVG */
class Led {
    constructor(parent, x, y, radius) {
      
        // state = 0 (éteinte)
        // state = 1 (allumée)
        this._state = 0;
        
        this._led = parent.appendElement("circle", {
            cx: x, cy: y, 
            r: radius - radius/16,
            fill: "gray",
            stroke: "black",
            'stroke-width': radius/8
        })
    }
    
    get led() {
      return this._led;
    }
    
    get state() {
      return this._state;
    }
    
    turnOn(timeline, duration=0.1, position=">") {
      
      timeline.to(this.led, {duration: duration}, position);
      
      gsap.set(this.led, {
        fill: "gray"
      })
      // animer vers la situation finale
      gsap.to(this.led, {
        fill: "red", 
        duration: duration,
        ease: "none",
      })
    }
    
    turnOff(timeline, duration=0.1, position=">") {
      
      timeline.to(this.led, {duration: duration}, position);
      
      gsap.set(this.led, {
        fill: "red"
      })
      // animer vers la situation finale
      gsap.to(this.led, {
        fill: "gray", 
        duration: duration,
        ease: "none",
      })
    }
    
    set state(valeur) {
      
      const color = gsap.utils.interpolate("gray", "rgb(127, 255, 0)", valeur)
      this.led.setAttribute("fill", color);
      this._state = valeur;
    }
}

/** Représente et dessine un ruban horizontal de leds dans un SVG */
class LedRibbon {
  
    constructor(parent, {
      number, x, y, radius=8, spacing=0
    } = {}) {
      
        // liste des leds créées par ce ruban
        var led1 = new Led(parent, x, y, radius);
        var led2 = new Led(parent, (x + (radius * 2 + spacing)), y, radius);
        var led3 = new Led(parent,x + (radius * 2 + spacing) * 2, y, radius);
        var led4 = new Led(parent,x + (radius * 2 + spacing) * 3, y, radius);
        
        this.leds = [led1, led2, led3, led4];
    }
}
  
// compléments à la librairie Math
Math.radians = (deg) => deg * Math.PI / 180
Math.degrees = (rad) => rad / Math.PI * 180

// dessin SVG
const svg = SVGelement.fromSelector("#dessin");

// dessiner une led
const led = new Led(svg, 50, 50, 16);
// allumer la led puis l'éteindre, dans une timeline
const TLled = gsap.timeline();

// pareil mais en manipulant la led comme si c'était un objet du DOM
TLled.to(led, {
    state: 1.0, // 1.0 = pleinement allumée
    duration: 1.0
})
TLled.to(led, {
    state: 0.0, // 0.0 = totalement éteinte
    duration: 0.5
}, ">+2") // voir timeline.to(target, vars, position)

// dessiner un ruban de leds
const ribbon = new LedRibbon(svg, {number: 16, x: 8, y: 8})

  </script>
</body>
</html>